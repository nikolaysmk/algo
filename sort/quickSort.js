// Проверяет базовый случай: если массив содержит 0 или 1 элемент, он уже отсортирован, и мы можем его вернуть.
// Выбирает первый элемент массива в качестве опорного.
// Разделяет оставшиеся элементы на два массива: элементы меньше опорного и элементы больше или равные опорному.
// Рекурсивно применяет quickSort к левому и правому подмассивам.
// Объединяет отсортированные подмассивы и опорный элемент в один массив и возвращает его.
function quickSort(arr) {
  if (arr.length <= 1) {
    return arr;
  }

  let pivot = arr[0]; // Выбираем опорный элемент
  let left = []; // Элементы меньше опорного
  let right = []; // Элементы больше опорного

  // Разделяем массив на две части: меньше и больше опорного элемента
  for (let i = 1; i < arr.length; i++) {
    if (arr[i] < pivot) {
      left.push(arr[i]);
    } else {
      right.push(arr[i]);
    }
  }

  // Рекурсивно применяем быструю сортировку к левому и правому подмассивам,
  // затем объединяем их с опорным элементом
  return quickSort(left).concat(pivot, quickSort(right));
}
