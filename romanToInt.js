// Создать объект для отображения римских символов в числа.
// Инициализировать переменную для хранения результата.
// Пройти по строке с римским числом, начиная с последнего символа.
// Для каждого символа добавить его значение к результату.
// Если текущий символ представляет собой значение меньше предыдущего, вычесть его из результата, вместо добавления.

// /**
//  * @param {string} s
//  * @return {number}
//  */
// var romanToInt = function (s) {
//   const romanMap = {
//     I: 1,
//     V: 5,
//     X: 10,
//     L: 50,
//     C: 100,
//     D: 500,
//     M: 1000,
//   };

//   let res = 0;

//   for (let i = s.length - 1; i >= 0; i--) {
//     const current = romanMap[s[i]];
//     const prev = romanMap[s[i + 1]] || 0;

//     if (current < prev) {
//       res -= current;
//     } else {
//       res += current;
//     }
//   }

//   return res;
// };

// Создание Словаря Символов
// Создаем объект romanMap, который содержит пары ключ-значение для каждого римского символа и его числового эквивалента.
// Инициализация Результата:
// Объявляем переменную result, которая будет хранить конечный результат. Изначально она равна 0.
// Обход Строки:
// Используем цикл для обхода строки s от первого символа к последнему.
// Обработка Текущего Символа:
// На каждой итерации цикла получаем числовое значение текущего символа из romanMap.
// Сравнение С Следующим Символом:
// Получаем числовое значение следующего символа. Если следующего символа нет (мы на последнем символе), используем значение 0.
// Применение Правила Вычитания:
// Если числовое значение текущего символа меньше следующего, это означает, что нам нужно применить правило вычитания (например, в случаях "IV" или "IX"). В таком случае вычитаем значение текущего символа из result.
// Добавление Значения К Результату:
// Если текущее значение не меньше следующего, просто добавляем его к result.
// Возвращение Результата

function romanToInt(s) {
  const romanMap = {
    I: 1,
    V: 5,
    X: 10,
    L: 50,
    C: 100,
    D: 500,
    M: 1000,
  };

  let result = 0;

  for (let i = 0; i < s.length; i++) {
    const current = romanMap[s[i]];
    const next = romanMap[s[i + 1]] || 0;

    if (current < next) {
      result -= current;
    } else {
      result += current;
    }
  }

  return result;
}
